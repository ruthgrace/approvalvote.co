{% extends "base.html.j2" %}

{% block title %}Create Poll - Approval Voting{% endblock %}

{% block content %}
<div id="poll-form-container" class="mt-8">
  <form id="poll-form" hx-post="/pollsubmit" hx-target="closest div" hx-swap="outerHTML">
    <div class="grid grid-cols-8 gap-4 mt-8">
      <div class="col-span-5">
        <input type="text" id="title" name="title" placeholder="Question" class="text-3xl placeholder:text-gray-500 font-medium mb-[1rem] w-full" required />
        <textarea id="description" name="description" cols="50" placeholder="Description (optional)" class="text-lg"></textarea>
      </div>
      <div class="col-span-3">
        <div class="flex justify-end">
          <a href="/makepoll">
            <button type="submit" class="btn-disabled">Create poll</button>
          </a>
        </div>
        <div id="error-message-div" class="flex w-full"></div>
      </div>
      <div class="col-span-5">
        <div class="bg-gray-50 rounded-3xl p-8 border border-gray-300">
            <label for="candidates" class="text-gray-500 text-lg">Poll options</label>
            <br />
            <br />
            <div class="relative">
              <input type="text" name="option" placeholder="Option" class="py-2 w-full pr-10 placeholder:text-lg bg-gray-50 focus:outline-none" required>
              <button 
                class="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-300 text-xl hover:text-gray-600"
                hx-delete="/remove-option"
                hx-target="closest div"
                hx-swap="outerHTML"
              >✕</button>
            <hr class="mt-3">
            </div>
            <div class="relative mt-3">
              <input type="text" name="option" placeholder="Option" class="py-2 w-full pr-10 placeholder:text-lg bg-gray-50 focus:outline-none" required>
              <button 
                class="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-300 text-xl hover:text-gray-600"
                hx-delete="/remove-option"
                hx-target="closest div"
                hx-swap="outerHTML"
              >✕</button>
            <hr class="mt-3">
            </div>
            <div class="relative mt-3 flex items-center">
              <button
                class="bg-blue-600 hover:bg-blue-700 text-white w-5 h-5 rounded-full flex items-center justify-center"
                hx-post="/add-option"
                hx-target="closest div"
                hx-swap="beforebegin"
              >
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="3" stroke="currentColor" class="w-3.5 h-3.5">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                </svg>
              </button> <span class="text-blue-600 font-semibold px-2">Add an option</span>
            </div>
        </div>
      </div>
      <div class="col-span-3">
        <div class="bg-gray-50 rounded-3xl p-8 border border-gray-300">

          <label for="settings" class="text-gray-500 text-lg">Settings</label>
          <br />
          <br />
          <div class="flex items-center justify-between">
            <label for="seats">Number of winners</label>
            <div class="flex items-center">
              <button 
                type="button"
                class="bg-white hover:bg-gray-100 h-6 w-6 border border-gray-300 rounded-full flex items-center justify-center text-2xl"
                onclick="this.nextElementSibling.stepDown()"
              >−</button>
              
              <input 
                type="number" 
                id="seats" 
                name="seats" 
                value="1" 
                min="1"
                class="mx-2 w-16 text-center border border-gray-300 rounded-full"
                required 
              />
              
              <button 
                type="button"
                class="bg-white hover:bg-gray-100 h-6 w-6 border border-gray-300 rounded-full flex items-center justify-center text-2xl"
                onclick="this.previousElementSibling.stepUp()"
              >+</button>
            </div>
          </div>
          <hr class="mt-3">
          <br />
          <div class="flex items-center justify-between">
            <label for="cover_url">Cover photo URL (optional)</label>
            <input type="text" id="cover_url" name="cover_url" />
          </div>
          <hr class="mt-3">
          <br />
          <label>
          <input type="checkbox" name="email_verification" value="True" /> Require voters to verify their email address
          </label>
          <hr class="mt-3">
          <br />
          <div class="flex items-center justify-between">
            <label for="email">Your email for poll administration</label>
            <input type="text" id="email" name="email" required />
          </div>
          <br />
          <br />
        </div>
      </div>
    </div>
  </form>
</div>

<script>
function isFormValid() {
  const form = document.getElementById('poll-form');
  return form.checkValidity();
}

// Update button class when inputs change
function updateSubmitButton() {
  const button = document.querySelector('button[type="submit"]');
  if (isFormValid()) {
    button.classList.remove('btn-disabled');
    button.classList.add('btn-primary');
  } else {
    button.classList.remove('btn-primary');
    button.classList.add('btn-disabled');
  }
}

// Add event listeners to all inputs
function addInputEventListeners() {
  document.querySelectorAll('input, textarea').forEach(input => {
    input.addEventListener('input', updateSubmitButton);
  });
  
  // Add Enter key functionality to option inputs
  document.querySelectorAll('input[name="option"]').forEach(input => {
    input.addEventListener('keydown', handleOptionEnterKey);
  });
}

// Handle Enter key press on option inputs
function handleOptionEnterKey(e) {
  if (e.key === 'Enter') {
    e.preventDefault(); // Prevent form submission
    
    const currentInput = e.target;
    const allOptionInputs = document.querySelectorAll('input[name="option"]');
    const currentIndex = Array.from(allOptionInputs).indexOf(currentInput);
    
    // If there's a next input, focus on it
    if (currentIndex < allOptionInputs.length - 1) {
      allOptionInputs[currentIndex + 1].focus();
    } else {
      // If this is the last input, add a new option and focus on it
      const addButton = document.querySelector('button[hx-post="/add-option"]');
      if (addButton) {
        // Simulate clicking the add button
        addButton.click();
        
        // Wait a brief moment for the new input to be added, then focus on it
        setTimeout(() => {
          const newOptionInputs = document.querySelectorAll('input[name="option"]');
          const newInput = newOptionInputs[newOptionInputs.length - 1];
          if (newInput) {
            newInput.focus();
            // Add event listeners to the new input
            newInput.addEventListener('input', updateSubmitButton);
            newInput.addEventListener('keydown', handleOptionEnterKey);
          }
        }, 100);
      }
    }
  }
}

// Initialize event listeners
addInputEventListeners();

// Re-initialize event listeners when new options are added via HTMX
document.body.addEventListener('htmx:afterSwap', function(e) {
  if (e.detail.target.querySelector('input[name="option"]')) {
    addInputEventListeners();
  }
});
</script>
{% endblock %}
