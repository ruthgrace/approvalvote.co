<div class="container mx-auto px-4">
  <div style="display: flex; justify-content: space-around; gap-20px;">
    <div style="flex: 1;">
      <h2 class="text-2xl font-bold mb-4">Votes for preferred result: {{ desired_candidates }}</h2>
      <div id="chart1"></div>
    </div>

    <div style="flex: 1;">
      {% if tie == True %}
        <h2 class="text-2xl font-bold mb-4">Votes for some of the tied winners: {{actual_candidates}}</h2>
      {% else %}
        <h2 class="text-2xl font-bold mb-4">Votes for the actual winning result: {{actual_candidates}}</h2>
      {% endif %}
      <div id="chart2"></div>
    </div>
  </div>
</div>

<script src="https://d3js.org/d3.v7.min.js"></script>
<script>
  // Reusable style functions
  const axisTextStyle = (selection) => {
    selection
      .style("font-size", "18px")
      .style("font-weight", "500")
      .style("fill", "black");
  };

  const axisTitleStyle = (selection) => {
    selection
      .style("text-anchor", "middle")
      .style("font-size", "22px")
      .style("font-weight", "bold");
  };

  function createBarChart(containerId, data, labels) {
    // Set dimensions
    const margin = {top: 20, right: 20, bottom: 120, left: 60};
    const containerWidth = 600;
    const width = containerWidth - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;
    const totalHeight = height + margin.top + margin.bottom;

    // Create SVG
    const svg = d3.select(containerId)
      .append("svg")
        .attr("width", containerWidth)
        .attr("height", totalHeight)
      .append("g")
        .attr("transform", `translate(${margin.left},${margin.top})`);

    // Create scales
    const x = d3.scaleBand()
      .range([0, width])
      .padding(0.3)
      .domain(labels);

    const y = d3.scaleLinear()
      .range([height, 0])
      .domain([0, {{max_votes}}]);

    // Add Y axis title
    svg.append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", 0 - margin.left - 5)
        .attr("x", 0 - (height / 2))
        .attr("dy", "1em")
        .call(axisTitleStyle)
        .text("Votes");

    // Add X axis title
    svg.append("text")
        .attr("transform", `translate(${width/2}, ${height + margin.bottom - 10})`)
        .call(axisTitleStyle)
        .text("Number of candidates in this set the vote was cast for");

    // Add X axis
    svg.append("g")
      .attr("transform", `translate(0,${height})`)
      .call(d3.axisBottom(x))
      .selectAll("text")  
      .style("text-anchor", "middle")
      .call(axisTextStyle)
      .attr("y", 30)
      .each(function(d) {
        const words = d.split(/\s+/);
        const maxChars = 15;
        let lines = [];
        let currentLine = words[0];

        for(let i = 1; i < words.length; i++) {
          if (currentLine.length + words[i].length + 1 <= maxChars) {
            currentLine += " " + words[i];
          } else {
            lines.push(currentLine);
            currentLine = words[i];
          }
        }
        lines.push(currentLine);

        d3.select(this).text(null);
        lines.forEach((line, i) => {
          d3.select(this)
            .append("tspan")
            .attr("x", 0)
            .attr("dy", i === 0 ? 0 : "1.2em")
            .text(line);
        });
      });

    // Add Y axis
    svg.append("g")
      .attr("transform", "translate(-10,0)")
      .call(d3.axisLeft(y)
        .ticks(5)
        .tickFormat(d3.format("d")))
      .selectAll("text")
      .call(axisTextStyle);

    // Create segmented bars
    const barGroups = svg.selectAll(".bar-group")
      .data(data)
      .enter()
      .append("g")
      .attr("class", "bar-group");

    barGroups.each(function(d, i) {
      const segments = i + 1;
      const segmentWidth = x.bandwidth() / segments;
      const segmentValue = d;
      
      d3.select(this)
        .selectAll(".segment")
        .data(d3.range(segments))
        .enter()
        .append("rect")
          .attr("class", "segment")
          .attr("x", d => x(labels[i]) + (d * segmentWidth))
          .attr("y", y(segmentValue))
          .attr("width", segmentWidth)
          .attr("height", height - y(segmentValue))
          .attr("fill", "#2563EB")
          .attr("fill-opacity", d => 1 - (d * 0.15))
          .attr("rx", 4)
          .attr("ry", 4);
    });

    // Add tooltips
    barGroups.selectAll(".segment")
      .append("title")
      .text((d, i, nodes) => {
        const barIndex = d3.select(nodes[i].parentNode).datum();
        return `${labels[barIndex]}: ${data[barIndex]} votes`;
      });

    // Set container height
    d3.select(containerId)
      .style("height", totalHeight + "px")
      .style("margin-bottom", "2rem");
  }

  // Create charts
  createBarChart("#chart1", {{desired_vote_tally}}, {{desired_chart_labels|tojson}});
  createBarChart("#chart2", {{actual_vote_tally}}, {{actual_chart_labels|tojson}});
</script>