{% extends "base.html.j2" %}

{% block content %}
<div class="space-y-4">
  <h1 class="text-3xl font-medium">{{title}}</h1>
  <p class="text-lg text-gray-500">{{description}}</p>
  <p class="text-lg">Poll results: {{winners}}</p>
  <div class="container mx-auto px-4">
    <div style="display: flex; justify-content: space-around; gap: 20px;">
      <div style="flex: 1;">
        <h2 class="text-2xl font-bold mb-4">Votes</h2>
        <p>Here is a chart of the vote counts for each candidate. Keep in mind that voters can vote for as many candidates as they want.</p>
        <div id="chart"></div>
      </div>
    </div>
  </div>
  <hr />

  <h2 class="text-2xl font-medium">Did you have a different preferred result?</h2>
  <div class="bg-gray-50 rounded-3xl p-8 border border-gray-300 space-y-4">
    <p>You can see how many more votes the winners got than your preferred result. What was your preferred result?</p>
    <form hx-post="/resultsubmit" hx-target="#resultresponse" hx-swap="innerHTML">
      <input type="hidden" name="poll_id" value="{{ poll_id }}" />
      <input type="hidden" name="seats" value="{{ seats }}" />
      {% for id, candidate in candidates.items() %}
      <label>
        <input type="checkbox" name="poll_option" value="{{id}}|{{candidate}}" /> {{candidate}}
      </label>
      <br />
      {% endfor %}
    </div>
    <button type="resultsubmit" class="bg-blue-600 hover:bg-blue-700 text-white font-medium px-6 py-4 rounded-full transition duration-150 ease-in-out">See how close your preferred candidates were to winning</button>
  </form>
  <div id="resultresponse"></div>
</div>

<script src="https://d3js.org/d3.v7.min.js"></script>
<script>
  // Set dimensions
  const margin = {top: 20, right: 20, bottom: 80, left: 60};
  const width = 800 - margin.left - margin.right;
  const height = 400 - margin.top - margin.bottom;
  const totalHeight = height + margin.top + margin.bottom;

  // Parse the data from Jinja
  const voteLabels = {{ vote_labels|tojson }};  // Use tojson filter
  const voteTally = {{ vote_tally|tojson }};

  // Create SVG
  const svg = d3.select("#chart")
    .append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", totalHeight)
    .append("g")
      .attr("transform", `translate(${margin.left},${margin.top})`);

  // Create scales
  const x = d3.scaleBand()
    .range([0, width])
    .padding(0.1)
    .domain(voteLabels);  // Use parsed labels

  const y = d3.scaleLinear()
    .range([height, 0])
    .domain([0, d3.max(voteTally)]);  // Use parsed tally

  // Add X axis
  svg.append("g")
    .attr("transform", `translate(0,${height})`)
    .call(d3.axisBottom(x))
    .selectAll("text")  
    .style("text-anchor", "middle")
    .style("font-size", "20px")
    .style("font-weight", "500")
    .style("fill", "black")
    .attr("y", 30)
    .each(function(d) {
      const words = d.split(/\s+/);
      const maxChars = 15;
      let lines = [];
      let currentLine = words[0];

      for(let i = 1; i < words.length; i++) {
        if (currentLine.length + words[i].length + 1 <= maxChars) {
          currentLine += " " + words[i];
        } else {
          lines.push(currentLine);
          currentLine = words[i];
        }
      }
      lines.push(currentLine);

      d3.select(this).text(null);  // Clear existing text
      lines.forEach((line, i) => {
        d3.select(this)
          .append("tspan")
          .attr("x", 0)
          .attr("dy", i === 0 ? 0 : "1.2em")
          .text(line);
      });
    });

  // Add Y axis
  svg.append("g")
    .attr("transform", "translate(-10,0)")
    .call(d3.axisLeft(y)
      .ticks(Math.min(d3.max(voteTally), 10))
      .tickFormat(d3.format("d")))
    .selectAll("text")
    .style("font-size", "18px")
    .style("font-weight", "500")
    .style("fill", "black");

  // Create bars
  svg.selectAll(".bar")
    .data(voteTally)
    .enter()
    .append("rect")
      .attr("class", "bar")
      .attr("x", (d, i) => x(voteLabels[i]))  // Use parsed labels
      .attr("y", d => y(d))
      .attr("width", x.bandwidth())
      .attr("height", d => height - y(d))
      .attr("fill", "#2563EB")
      .attr("rx", 4)
      .attr("ry", 4);

  // Add tooltips
  svg.selectAll(".bar")
    .append("title")
    .text((d, i) => `${voteLabels[i]}: ${d} votes`);  // Use parsed labels

  // Set container height to match SVG
  d3.select("#chart")
    .style("height", totalHeight + "px")
    .style("margin-bottom", "2rem");  // Add some spacing after chart
</script>
{% endblock %}